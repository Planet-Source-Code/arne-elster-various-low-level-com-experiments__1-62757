VERSION 5.00
Begin VB.Form Form1 
   Caption         =   "Form1"
   ClientHeight    =   3090
   ClientLeft      =   60
   ClientTop       =   450
   ClientWidth     =   4680
   LinkTopic       =   "Form1"
   ScaleHeight     =   3090
   ScaleWidth      =   4680
   StartUpPosition =   3  'Windows-Standard
End
Attribute VB_Name = "Form1"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private Sub Form_Load()
    Dim arr()   As Long ' <= we'll get information on this array
    Dim t(3)    As Long ' dummy array
    Dim i       As Long ' just a counter

    ' First we try to get the undimensioned array`s safearray.
    ' VB hasn't created a sa for arr() yet, GetSafeArray will
    ' notice the illegal pointer and return an empty sa.
    Debug.Print "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"
    Debug.Print "undimensioned:"

    With GetSafeArray(ArrPtr(arr))
        Debug.Print "Dimensions: " & .cDims
        Debug.Print "Elements: " & .cbElements
        Debug.Print "Locks: " & .cLocks
        Debug.Print "Features: " & Hex(.fFeatures) & "h"
        Debug.Print "Data Ptr: " & Hex(.pvData) & "h"
        Debug.Print ""
        For i = .cDims - 1 To 0 Step -1
            Debug.Print "Dimension " & (.cDims - i)
            Debug.Print "LBound: " & .rgsabound(i).lLBound
            Debug.Print "UBound: " & .rgsabound(i).lLBound + .rgsabound(i).cElements - 1
            Debug.Print "Elements: " & .rgsabound(i).cElements
            Debug.Print ""
        Next
    End With

    Debug.Print "Vartype: ";
    If SafeArrayVarType(ArrPtr(arr)) = VT_I4 Then
        Debug.Print "Signed Long"
    Else
        Debug.Print "This safearray has no vartype"
    End If

    Debug.Print "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"
    Debug.Print ""

    ' now we have 2 dimensions in our array
    ' dimension 1: 4 - 5  ( 2 elements )
    ' dimension 2: 0 - 2  ( 3 elements )
    ReDim arr(4 To 5, 2)

    Debug.Print "/////////////////////////////////////////////"
    Debug.Print "dimensioned:"

    With GetSafeArray(ArrPtr(arr))
        Debug.Print "Dimensions: " & .cDims
        Debug.Print "Elements: " & .cbElements
        Debug.Print "Locks: " & .cLocks
        Debug.Print "Features: " & Hex(.fFeatures) & "h"
        Debug.Print "Data Ptr: " & Hex(.pvData) & "h"
        Debug.Print ""
        For i = .cDims - 1 To 0 Step -1
            Debug.Print "Dimension " & (.cDims - i)
            Debug.Print "LBound: " & .rgsabound(i).lLBound
            Debug.Print "UBound: " & .rgsabound(i).lLBound + .rgsabound(i).cElements - 1
            Debug.Print "Elements: " & .rgsabound(i).cElements
            Debug.Print ""
        Next
    End With

    Debug.Print "Vartype: ";
    If SafeArrayVarType(ArrPtr(arr)) = VT_I4 Then
        Debug.Print "Signed Long"
    Else
        Debug.Print "This safearray has no vartype"
    End If

    Debug.Print "/////////////////////////////////////////////"
    Debug.Print ""

    Debug.Print "ArrayFromPointer test: illegal array references"

    ' create some data
    t(0) = 1
    t(1) = 2
    t(2) = 3
    t(3) = 4

    ' We'll now create an array that will point to t()`s data.
    ' Note: GetSafeArray(t).pvData = VarPtr(t(0))
    arr = ArrayFromPointer(VarPtr(t(0)), UBound(t), 4, vbLong)

    ' If you change an element of arr(), it will also
    ' be changed in t(), because both arrays point to
    ' the same data.
    arr(0) = 5

    For i = 0 To UBound(arr)
        Debug.Print "t(" & i & ")=" & t(i) & "  =  ";
        Debug.Print "arr(" & i & ")=" & arr(i)
    Next
    Debug.Print ""
    Debug.Print "ArrayFromPointer test: long to 4 bytes"

    ' Byte Array from Long
    Dim testlng     As Long
    Dim testbt()    As Byte

    testlng = &H12345678
    Debug.Print "testlng=" & Hex(testlng) & "h"

    ' create a byte-array which points to testlng
    ' interesting: VB seems to copy the data to another place in this case.
    '              I don't know why, but the pointers are different.
    testbt = ArrayFromPointer(VarPtr(testlng), 4, 1, vbByte)
    For i = 0 To UBound(testbt)
        Debug.Print "testbt(" & i & ")=" & Hex(testbt(i)) & "h"
    Next

    ' destroy the safearrays generated by ArrayFromPointer
    DestroyArray ArrPtr(arr)
    DestroyArray ArrPtr(testbt)

    Unload Me
End Sub
